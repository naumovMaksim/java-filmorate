CREATE TABLE PUBLIC.RATING IF NOT EXISTS (
    RATING_ID INTEGER NOT NULL,
    NAME VARCHAR_IGNORECASE NOT NULL,
    CONSTRAINT RATING_PK PRIMARY KEY (RATING_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_8 ON PUBLIC.RATING (RATING_ID) IF NOT EXISTS;

CREATE TABLE PUBLIC.GENERE IF NOT EXISTS (
     GENERE_ID INTEGER NOT NULL AUTO_INCREMENT,
     NAME VARCHAR_IGNORECASE NOT NULL,
     CONSTRAINT GENERE_PK PRIMARY KEY (GENERE_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_7 ON PUBLIC.GENERE (GENERE_ID) IF NOT EXISTS;

CREATE TABLE PUBLIC.FILMS IF NOT EXISTS (
    FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
    NAME VARCHAR_IGNORECASE NOT NULL,
    DESCRIPTION INTEGER NOT NULL,
    RELEASE_DATE DATE NOT NULL,
    DURATION INTEGER NOT NULL,
    RATING_ID INTEGER NOT NULL,
    CONSTRAINT FILMS_FK_1 PRIMARY KEY (RATING_ID,RATING_ID),
    CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID)
);
CREATE INDEX FILMS_FK_1_INDEX_3 ON PUBLIC.FILMS (RATING_ID) IF NOT EXISTS;
CREATE UNIQUE INDEX PRIMARY_KEY_3 ON PUBLIC.FILMS (FILM_ID) IF NOT EXISTS;

CREATE TABLE PUBLIC.GENRE_FILM IF NOT EXISTS (
     GENERE_ID INTEGER NOT NULL,
     FILM_ID INTEGER NOT NULL,
     CONSTRAINT GENERE_FILM_GENERE_ID_PK PRIMARY KEY (GENERE_ID),
     CONSTRAINT GENRE_FILM_FK PRIMARY KEY (GENERE_ID,GENERE_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_C ON PUBLIC.GENRE_FILM (GENERE_ID) IF NOT EXISTS;

-- PUBLIC.GENRE_FILM foreign keys
ALTER TABLE PUBLIC.GENRE_FILM ADD CONSTRAINT GENRE_FILM_FK FOREIGN KEY (GENERE_ID) REFERENCES PUBLIC.GENERE(GENERE_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;
-- PUBLIC.FILMS foreign keys
ALTER TABLE PUBLIC.FILMS ADD CONSTRAINT FILMS_FK_1 FOREIGN KEY (RATING_ID) REFERENCES PUBLIC.RATING(RATING_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;

CREATE TABLE PUBLIC.USERS IF NOT EXISTS (
     USER_ID INTEGER NOT NULL AUTO_INCREMENT,
     EMAIL VARCHAR_IGNORECASE NOT NULL,
     LOGIN VARCHAR_IGNORECASE NOT NULL,
     NAME VARCHAR_IGNORECASE,
     BIRTHDAY DATE NOT NULL,
     CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_4 ON PUBLIC.USERS (USER_ID) IF NOT EXISTS;

CREATE TABLE PUBLIC.USER_FRIENDS IF NOT EXISTS (
      FRIEND_ID INTEGER NOT NULL,
      USER_ID INTEGER NOT NULL,
      STATUS VARCHAR_IGNORECASE NOT NULL,
      CONSTRAINT USER_FRIENDS_FK PRIMARY KEY (USER_ID,USER_ID),
      CONSTRAINT USER_FRIENDS_FRIEND_FK PRIMARY KEY (USER_ID,FRIEND_ID),
      CONSTRAINT USER_FRIENDS_PK PRIMARY KEY (USER_ID)
);
CREATE UNIQUE INDEX PRIMARY_KEY_B ON PUBLIC.USER_FRIENDS (USER_ID) IF NOT EXISTS;
CREATE INDEX USER_FRIENDS_FRIEND_FK_INDEX_B ON PUBLIC.USER_FRIENDS (FRIEND_ID) IF NOT EXISTS;
-- PUBLIC.USER_FRIENDS foreign keys
ALTER TABLE PUBLIC.USER_FRIENDS ADD CONSTRAINT USER_FRIENDS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;
ALTER TABLE PUBLIC.USER_FRIENDS ADD CONSTRAINT USER_FRIENDS_FRIEND_FK FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;

CREATE TABLE PUBLIC.FILM_LIKES IF NOT EXISTS (
     FILM_ID INTEGER NOT NULL,
     USER_ID INTEGER NOT NULL,
     CONSTRAINT FILM_LIKES_FK PRIMARY KEY (FILM_ID,FILM_ID),
     CONSTRAINT FILM_LIKES_PK PRIMARY KEY (FILM_ID),
     CONSTRAINT FILM_LIKES_USERS_FK PRIMARY KEY (USER_ID,USER_ID)
);
CREATE INDEX FILM_LIKES_USERS_FK_INDEX_7 ON PUBLIC.FILM_LIKES (USER_ID) IF NOT EXISTS;
CREATE UNIQUE INDEX PRIMARY_KEY_7A ON PUBLIC.FILM_LIKES (FILM_ID) IF NOT EXISTS;
-- PUBLIC.FILM_LIKES foreign keys
ALTER TABLE PUBLIC.FILM_LIKES ADD CONSTRAINT FILM_LIKES_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;
ALTER TABLE PUBLIC.FILM_LIKES ADD CONSTRAINT FILM_LIKES_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT IF NOT EXISTS;